c:\work\C1541-Tweaks\c1541\Release\c1541.exe "D:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\s\seuck_s1[sensible_1988](pal).g64" -recover C:\Temp\d64recover\file%d_%d.prg
c:\work\C1541-Tweaks\c1541\Release\c1541.exe "D:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\s\seuck_s2[sensible_1988](pal).g64" -recover C:\Temp\d64recover\file%d_%d.prg



dir
chain *
chainwrite C:\temp\d64recover\boot 17 0


When using ../SEUCK/GAME4__I.P00, the second barrier should have two extra enemies, a jumping tree...



C:\Work\C64\Scroller>BuildIt.bat ScrollEntry_SEUCK.a && Scroller.prg



Paralax_Enable
	Parallax scrolling demo
	"C:\Work\C64\SEUCK\ParalaxTest.vsf"
	"C:\Work\C64\SEUCK\ParalaxTestBlocksOnly.vsf"




TSTCLLSN.P00
	Demonstrates extra enemies available.
	"C:\Work\C64\SEUCK\TestCollision.vsf"
	
	
	
"C:\Work\C64\SEUCK\Sideways.vsf"



* Goals *
Reduce slowdown and flicker in SEUCK games.
Remove the sprite to background scroll start/stop wobble.
Remove wasted memory, the editor is mostly still present.

* Stretch goals *
Expand games with extra functionality.
	Pickups
	Extra movement AI
	Directional fire
	Special weapons
Add parallax scrolling.
Extra title screen capability.
Linked players.
Twin mode
Linked enemies
Two-way bullets
Player can shoot certain enemy bullets.
Sprite ordering
Hi-score etc.





How to find:
Characters
Blocks
Maps
	 Colours
Levels
Sprites
Animations
	Firing
Attack waves
	Movement
Score panel
Sound effects
Title screen





Start of final game $4048

https://www.c64-wiki.com/wiki/S.E.U.C.K.

https://docs.google.com/document/d/12BpZ3AHx5HXzJ6y-Kt0s7j51BUJgdqWsx_0PjP_UaXw/edit?usp=sharing

Source code: https://github.com/martinpiper/C64Public/blob/master/Scroller/README.md


SEUCK - Background
https://youtu.be/FKcuB8lMOSQ

00:07 Introduction
00:50 SEUCK functionality
02:45 Example game 1
04:40 Saving a final game
06:20 Loading the final game
08:23 Editor code remains in the game
09:15 Restoring the editor from the game
10:55 Push scrolling sprite wobble bug
12:00 Reverse engineering rationale
12:30 What to reverse engineer
13:20 Identifying data offsets for the background
40:25 Using CharPad to validate the data offsets
43:00 Reviewing the new code and demo






SEUCK - Levels
https://youtu.be/h9aFMf6X3dI
https://csdb.dk/release/?id=152965


$ae92			: 0  1  2  3  4  5  6
Base			: 00 00 14 00 00 81 FF	Scroll
Level1			: 0E 00 0E 00 05 01 80	Still
Level1Redraw	: 0E 00 0E 00 05 01 00	Still
Scroll2			: 0E 00 0E 00 05 81 00	Scroll
Push2			: 0E 00 0E 00 05 C1 00	Push
Push1			: 0E 00 0E 00 05 C0 00

0/1 Start pos lo/hi
2/3 End pos lo/hi : Map end = FB 01
4 = Duration
5 = Type : Bits 7/6
		Still	: %00
		Scroll	: %10
		Push	: %11
	Speed : Bit 0 : 0 = Speed 1 : 1 = Speed 2
6 = 00 = Redraw : ff = loop : 80 = Continue


With three static screens...
00 00 00 00 02 00 00
27 00 27 00 03 00 00
35 00 35 00 04 00 FF

60 00 BA 00 00 80 80
60 00 BB 00 00 80 80

Redraw Redraw Loop
Times: 2 3 4


00:00 Introduction
00:18 Previously: Background map data
00:26 This episode: Levels
01:00 How levels link to enemy attack waves
04:21 Finding level data
35:34 Using data and source code
39:38 Next video: Sprites and animations
39:59 Example game with lots of enhancements
44:49 Final test of level data




SEUCK - Sprites
https://youtu.be/VJbpLoU6OJ0

00:00 Introduction
00:18 Previously: Level data
00:30 This episode: Sprites and animations
01:11 Finding sprite and colour data
09:46 Adding the sprite multiplexor
13:06 One sprite with scrolling
14:00 Adding more sprites with scrolling
16:40 There are 32 sprites!
17:15 Finding animation data
34:03 Animation code testing
35:38 Player firing
37:08 Directional animation test




SEUCK - Attack waves - Part 1
https://youtu.be/60HR-yhPSy8

Enemy 1: 2A 00 CB 3F 0C 38 00
Bytes:
	0/1	= Pixel scroll position, from the bottom of the map, starting at zero and increasing.
	2/3	= Address of movement data
	4/5	= X/Y coordinates. X = div 2
	6	= Enemy type index, 0 based
>> FF 48 F8 62 F2 24 F4 61 F1 *10*
Enemy 2: 2A 00 C1 3F A3 E5 00
>> FF 8A 42 1A 22 4A 72 88 F8 F8 *10*

Enemy 3: 00 00 CB 3F 0B 38 00
Enemy 4: 01 00 C9 3F 0A 35 01
Enemy 5: 03 00 C7 3F 0B 38 01


Corners:
It has inserted the enemies based on their pixel scroll position
00 00 C5 3F A4 38 01		top right
00 00 C3 3F A3 E4 01
00 00 C1 3F 0C E4 01
01 00 C9 3F 0A 35 01
03 00 C7 3F 0B 38 01

0C 38	Top left
A4 38	Top right
A3 E4	Bottom right
0C E4	Bottom left

We have enough to place enemies in the map as it scrolls


00:00 Introduction
00:18 Why reverse engineer?
01:30 This episode: Enemy attack waves
03:30 Reviewing the requirements
08:00 Preparing some data
10:14 Comparing binary file differences
16:49 Found some pointers to data
18:35 Found enemy placement data?
22:28 Analysing the data
36:48 Reviewing the new code
44:14 Code demo




SEUCK - Attack waves - Part 2

Decoding the movement data
Automated testing


Known data

> Test moves 1
	Top left static
		FF 10
	Top right, four frames left
		FF 12 10
	Bottom right, four frames up
		FF 18 10
	Bottom left, dour frames right, then four down
		FF 14 11 10

	Low nybble movement, bits:
		1 = 0001 = right
		2 = 0010 = left
		4 = 0100 = down
		8 = 1000 = up
	Hi nybble step count, multiply each value by 4 frames
		

> Enemy bits speed affects how far each movement step actually moves. Enemy bits speed can be altered after the movement data has been entered.

Raw placement data
00 00 0>CB 3F 0C 38 00
00 00 1>C9 3F A2 38 00
00 00 2>C6 3F A1 E3 00
00 00 3>C3 3F 0C E6 00

> Raw movement data
FF 14 11 3>10 FF 18 2>10 FF 12 1>10 FF 0>10



> Test moves 2
Down right, up right, up left, down left
FF 16 1A 19 15 10


> Test moves 3
Longer movement: Long right, short up, short left, long down
FF B4 F4 A2 98 F1 F1 10

We have enough data to reproduce the behaviour...


00:00 Introduction
00:18 Why reverse engineer?
01:25 This episode: Attack wave movement
03:45 Single stepping the test movements
09:08 Data analysis, understanding bits
21:26 New enemy movement code
27:40 Running the new code
33:34 Enemy AI code
35:40 Enemy AI demo

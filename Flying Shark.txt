Flying Shark

During load
===========

Useful for trapping each stage of the protection and load, since it oftn uses job code $e0 in $00 to execute the code after the the head: bk 8:300

8:0397 reads track $26 = 38

Uses IRQ processing at FE67

8:329 8:330 = Signature check: https://preservation64.de/index.php?title=GMA87
	$a9 $69
	Of raw data data from the head


Why isn't c1541 reading that track/sector data?
g64conv instead? https://github.com/markusC64/g64conv/releases
"C:\Users\marti\Downloads\g64conv-v4.3-win32\g64conv.exe"
"C:\Users\marti\Downloads\g64conv-v4.3-win32\g64conv.exe" "E:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\f\flying_shark[firebird_1987](pal)(!).g64" c:\temp\fs0.txt 0
"C:\Users\marti\Downloads\g64conv-v4.3-win32\g64conv.exe" "E:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\f\flying_shark[firebird_1987](pal)(!).g64" c:\temp\fs1.txt 1
"C:\Users\marti\Downloads\g64conv-v4.3-win32\g64conv.exe" "E:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\f\flying_shark[firebird_1987](pal)(!).g64" c:\temp\fs5.txt 5

Only occurs once in the whole disk: 69 57 57 a9 a9


c:c1f7 reads and returns $61, which is sent by the 1541 8:36e
c:c073 stores this $61 onto the stack
c:c3c3 eventually pulls it from the stack
Which eventually does a decramble with that value at c:c3cc




Note the wide map near top of RAM, copied into the double buffered screen in second bank


Try drive fail at 300 later on...


180d entry point


In game
=======

$1000 game start before level data load

Need to:
* Find the minimal code that loads level data
	$a00
* What is loaded and how the drive finds the data to send to the C64
	Files from track/sector table $a09
* If there is any decompression, or if the data can be compressed
	Seem to be files that load to $400 $4000 $8000 and some to $c000
	Can be compressed
* The memory that is used by the current load routines
	So $900 (table) - $cff looks to be used by the drive code


$b19 is get byte from disk, seems to use control byte escaping with $01
$c99 is get load address lo/hi


$b41 and $b5e seem to be PAL/NTSC timed two-bit protocol routines

$171f seems to be the NMI routine for the score panel

$b94 seems to be a kernal init and PAL/NTSC check and drive code tweak based on $2a6
	> $2a6 reads could be used to identify other drive code tweaks


$bb3 might be "load data", seems to use track/secotr setup into $b01/$b05 by $a35
$c52 seems be the end of the load data

$bb6 init with 0 for $43?

	$cb2 memory init of table at $900 , seems to expand the two-bit protocol lookup?
	$c76 primes drive for receiving a command
	$c8e Sends "M-"

$bc0 sends "W" for "M-W" and drive code from $a47++
$bf1 sends "M-E" for fast load

$c28 loaded data store (indirected)


Break bb3 and then backtrace (bt) shows 3c77 jsr $0a00, which is a lovely suspicious round address, with A explicitly set to 0
Earlier it looks like 3c65 ldy $110e y=0 is also doing some pointer loads which look like level setup?
break 3c65 and then > 110e 1/2/3/4 definitely causes the different levels to load.

$110e = level to load

$a00 can get called multiple times for each level load, in hex:
When $110e = 0 then A = 0, 1, 2, 3
When $110e = 1 then A = 4, 5, 6, 7, 8
When $110e = 2 then A = 9, a, b, c
When $110e = 3 then A = d, e, f, 10
When $110e = 4 then A = 11, 12, 13, 14, 15

$a35 (from jmp at $a00) seems to load track/sector from the pairs (2 byte) table at $a09
>C:0a09  17 02 0c 00  0c 01 18 00  18 03 19 00  19 07 09 00
>C:0a19  09 01 09 06  08 01 08 09  1c 06 1c 08  07 09 1d 02
>C:0a29  06 01 06 02  05 00 05 03  20 00 20 04

chainwrite c:\temp\fs\00.prg $17 $02
chainwrite c:\temp\fs\01.prg $0c $00
chainwrite c:\temp\fs\02.prg $0c $01
chainwrite c:\temp\fs\03.prg $18 $00
chainwrite c:\temp\fs\04.prg $18 $03
chainwrite c:\temp\fs\05.prg $19 $00
chainwrite c:\temp\fs\06.prg $19 $07
chainwrite c:\temp\fs\07.prg $09 $00
chainwrite c:\temp\fs\08.prg $09 $01
chainwrite c:\temp\fs\09.prg $09 $06
chainwrite c:\temp\fs\0a.prg $08 $01
chainwrite c:\temp\fs\0b.prg $08 $09
chainwrite c:\temp\fs\0c.prg $1c $06
chainwrite c:\temp\fs\0d.prg $1c $08
chainwrite c:\temp\fs\0e.prg $07 $09
chainwrite c:\temp\fs\0f.prg $1d $02
chainwrite c:\temp\fs\10.prg $06 $01
chainwrite c:\temp\fs\11.prg $06 $02
chainwrite c:\temp\fs\12.prg $05 $00
chainwrite c:\temp\fs\13.prg $05 $03
chainwrite c:\temp\fs\14.prg $20 $00
chainwrite c:\temp\fs\15.prg $20 $04


c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\00.prg c:\temp\fs\00.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\01.prg c:\temp\fs\01.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\02.prg c:\temp\fs\02.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\03.prg c:\temp\fs\03.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\04.prg c:\temp\fs\04.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\05.prg c:\temp\fs\05.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\06.prg c:\temp\fs\06.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\07.prg c:\temp\fs\07.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\08.prg c:\temp\fs\08.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\09.prg c:\temp\fs\09.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0a.prg c:\temp\fs\0a.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0b.prg c:\temp\fs\0b.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0c.prg c:\temp\fs\0c.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0d.prg c:\temp\fs\0d.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0e.prg c:\temp\fs\0e.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\0f.prg c:\temp\fs\0f.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\10.prg c:\temp\fs\10.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\11.prg c:\temp\fs\11.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\12.prg c:\temp\fs\12.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\13.prg c:\temp\fs\13.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\14.prg c:\temp\fs\14.cmp 2
c:\work\c64\bin\LZMPi.exe -no -yo -cu c:\temp\fs\15.prg c:\temp\fs\15.cmp 2


90,773 bytes to 39,831 bytes is it worth it? Probably yes.


Seem to be files that load to $400 $4000 $8000 and some to $c000

To make this easier, going to need an extra "extract file chain using track and sector start" in c1541


There are also two other jmp entry points at $a03 and $a06 ... But they don't seem to be referenced anywhere by jmp or jsr.
$a03 jmp $c53 = Send drive UJ?
$a06 jmp $b94 = Kernal init and PAL/NTSC check, as discovered above


Drive load routines memory range: $a00 - $ccc ? Perhaps $cff by inspection?



Options for a protection free version:
* Obviously compress the game into a single prg
	> Remember to clear out unused memory

* Extract the track/sector files and write to numbered files, then write to DOS format disk with numbered files (in hex)
	Check the fast load code escapes the control bit, that it's not in the file data itself

* Very simple, kernal load of file data via $a00
	Since the data seems to have lo/hi address at the start
	
* Compress file data using U mode
	Decompress using kernal byte fetch streaming
	Use fast load byte stream with decompress

* Use fast load
	Will need boot menu to upload drive code



https://github.com/martinpiper/DebuggingDetails



cd /d C:\Work\DebuggingDetails

Then run: FlyingShark.bat


** Could do with clearing the loading screen at $4000 during the main game load **

With original disk attached
bank ram
f 800 ffff 0
load "*",8,1

break when loader screen is displayed
note io d000 results for the bitmap screen

f 4000 63ff 00

bk 1000

Continue loading...

s "c:\temp\fs\gamestart 1000.prg" 0 200 ffff




** Finding infinite lives
ms 7fc0
w store 7fcd
2867 indirected store into lives sprite
chis 30
shows 2862 lda from $f928,x to update the sprite
$2863 is stored by stx @ 2858
X comes from 2842 lda $100,y and Y=8

w store 108
shows
C:1bc1  CE 08 01    DEC $0108
C:1bc4  CE 11 10    DEC $1011

1011 = lives
> 1011 ff
or
> 1bc9 ea ea ea ea ea
To remove the lives check entirely




* If the drive reset in DoLoad is disabled then during the game start (after $1000) $3d90 there is a sta $dd02 with A=$3f
	This causes the drive load pulse loop to exit (8:706) and causes driverSerialSignalReceived to start, even before the game load requets at $a000 starts sending data
	bk c:1000
	bk c:3d90
	bk 8:706
	In the game there is a $3d88 jsr IOINIT (ff84)
	This causes the drive code to start receiving an incorrect command byte and it waits in waitACK4
	This is why in the game loader replacement code this works: 	jsr IOINIT lda ZPCurrentFileDeviceNumber jsr LISTEN 
		C64 In LISTEN $ed2e sets ATN which causes the drive code to exit
		It "completes" the drive code receive byte and causes the ATN exit to happen, which allows the M-E to start the drive code again.




c:\work\C1541-Tweaks\c1541\Release\c1541.exe "E:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\f\flying_shark[firebird_1987](pal)(!).g64" -recover C:\Temp\d64recover\file%d_%d.prg
Finds some extra files, mostly title screen unpack and display, and the original basic loader code "file19_0.prg" with a "Hope this one works" message.



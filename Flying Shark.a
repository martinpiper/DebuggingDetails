; Replacement load routine for Flying Shark. This also includes the binary game data before the level load.

; cd /d C:\Work\DebuggingDetails
; ..\c64\acme.exe --lib ..\C64\ --msvc -v9 "Flying Shark.a"

!source "stdlib/stdlib.a"
!source "stdlib/LongBranches.a"
!to "FlyingSharkLoader.prg", cbm
!sal
!sl "FlyingSharkLoader.map"
!svl "FlyingSharkLoader.lbl"
!pdb "FlyingSharkLoader.pdb"
!cpu 6510
!ct pet

kStartOffset = $200 - 2

RNXPCompressionDecompress_WriteBytesmAddr	= ZPStartBasicLo


;EnableKernalLoad = 1

* = $300
!bin "c:\temp\fs\gamestart 1000.prg" , ($a00-$300) , * - kStartOffset

* = $a00
	jmp DoLoad
	jmp FlashBorder
	jmp FlashBorder

; Call this to boot the game with default init
BootGame
	+MStopInitStack_X
	+MByteValueToAddress_A ProcessorPortDefault , ZPProcessorPort
	jmp $1000
	
; Indicate an error if these entry points are actually used by the game
FlashBorder
	+MDebugBreak
	

	
DoLoad
	pha
	; low nybble
	and #$0f
	tax
	lda .numToHexTab,x
	sta .fileNameStart+1
	pla
	; High nybble
	lsr
	lsr
	lsr
	lsr
	tax
	lda .numToHexTab,x
	sta .fileNameStart
	
	+SetDefaultScreenLowerCase_A
	lda #VIC2Colour_Black
	sta VIC2ScreenColour
	sta VIC2BorderColour
	+ClearScreenAtWithA_X COLOURRAM
	+DisplayColourTextAt_AX .loadingStart , .loadingEnd , SCREENRAM + (VIC2ScreenCharsWidth * (VIC2ScreenCharsHeight-1)), VIC2Colour_White

!ifdef EnableKernalLoad {
	; Logical number, device number, secondary address...
	lda #1
	ldx ZPCurrentFileDeviceNumber
	ldy #0
	jsr SETLFS

	lda #2
	ldx #<.fileNameStart
	ldy #>.fileNameStart
	jsr SETNAM

	jsr OPEN
	
	ldx #1
	jsr CHKIN
	
	jsr CHRIN
	sta RNXPCompressionDecompress_WriteBytesmAddr
	jsr CHRIN
	sta RNXPCompressionDecompress_WriteBytesmAddr+1
	
	jsr RNXPCompressionDecompressU
	
	; And restore normal ZPProcessorPort
	lda #ProcessorPortDefault
	sta ZPProcessorPort
	cli

	lda #1
	jsr CLOSE
	
	jsr CLRCHN
	
	rts
} else {
!if 1 {
	; Safer to reset the drive all the time to avoid any nasty partial serial pulses caused by game code...
;.smReset	lda #0
;	bne .noReset
;	inc .smReset+1
	
	jsr IOINIT

	lda ZPCurrentFileDeviceNumber
	jsr LISTEN
	lda #$6f	; $f (command channel) OR $60
	jsr SECOND
	jsr READST

	ldx #0
.meoutl:
	lda .commandME,x
	jsr CIOUT
;	jsr READST
;	and #%10000011	; Ignore EOI
;	bne .initError
	inx
	cpx #.commandMELength
	bne .meoutl

	jsr UNLSN
;	jsr READST
	JSR $EEB3
.noReset
}
	
	lda #2
	ldx #<.fileNameStart
	ldy #>.fileNameStart

	jsr IRQDisk_Load
	
	jsr SafeCHRIN
	sta RNXPCompressionDecompress_WriteBytesmAddr
	jsr SafeCHRIN
	sta RNXPCompressionDecompress_WriteBytesmAddr+1
	
	jsr RNXPCompressionDecompressU

	; And restore normal ZPProcessorPort
	lda #ProcessorPortDefault
	sta ZPProcessorPort
	cli
	
	; Read the last escape after all data, should exit
	jsr IRQDisk_computerRecv
	
	rts

	; Try a hack exec of the drive code in memory
.commandME:
	!raw "M-E"
	!by 0,$05
.commandMELength = * - .commandME
}
	
.loadingStart
	!scr "Loading file "
.fileNameStart !by 0 , 0
.loadingEnd

.numToHexTab
	!raw "0123456789abcdef"


SafeCHRIN
	php
	stx .sxX+1
	sty .sxY+1
	lda #ProcessorPortDefault
	sta ZPProcessorPort
!ifdef EnableKernalLoad {
	jsr CHRIN
} else {
	jsr IRQDisk_computerRecv
}
	sta .smA+1
	; Need to enable kernal with IO while loading compressed data
	sei
	lda #ProcessorPortKERNALWithIO
	sta ZPProcessorPort
	
.sxX ldx #0
.sxY ldy #0
.smA lda #0
	plp
	rts
	

!macro RNXPCompressionIncBorder_A {}

RNXPCompressionDecompress_GetBytesmAddrAsMacro = 1
!macro MRNXPCompressionDecompress_GetBytesmAddrAsMacro {
	jsr SafeCHRIN
}


; These do not have to be in zeropage, but for speed they should be
; Although we are pulling bytes from the drive over serial, so speed is less of an issue... :)
RNXPCompressionDecompress_TempWord1			!word 0
RNXPCompressionDecompress_TempOffset		!word -1

!source "Decompression\DecompressionUReferenceLongOffset.a"


!ifndef EnableKernalLoad {
!source "IRQDiskVars.a"
IRQDisk_MachineTarget = IRQDisk_MachineTypeC64
IRQDisk_Retries = 5
IRQDisk_LEDFlash = 15

; Minimal code
IRQDisk_NoDriveCode = 1
IRQDisk_NoCode_LoadAfterName = 1
IRQDisk_NoCode_Pulse = 1
IRQDisk_NoCode_Save = 1

!zn {
!source "IRQDiskC64.a"
!source "IRQDisk.a"
}
}

* = $d00
!bin "c:\temp\fs\gamestart 1000.prg" , ($10000-*) , * - kStartOffset


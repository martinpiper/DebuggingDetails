Exile
https://www.youtube.com/watch?v=Bh24hlZpgCQ

"D:\C64_Preservation_Project_10th_Anniversary_Collection_G64\c64pp-g64-zip\e\exile[audiogenic_1991](pal).g64"


https://www.lemon64.com/game/exile


https://project64.c64.org/Games/exile.txt


https://www.lemon64.com/cheat/exile/865
https://www.lemon64.com/doc/exile/218
https://www.gamespot.com/games/exile-1988/cheats/


5 charsets!! Updated by $83dc



http://www.level7.org.uk/miscellany/exile-disassembly.txt
>+39326 +14
>+39326 0e
$999e = inventory slot usage count (up to 5 ish)
$999f = inventory
68 = grenade
Look for: stack objects:
	The list is not quite the same in this version
> 999e 4 9 9 9 9 9
Green frogs, not red slime


> 999e 4 60 61 62 63
Gives flasks and the destinator

> 999e 1 60
Gives destinator, teleport back to the start and fly into the zone...



00:11 Introduction
00:24 Disk version with fast load
01:06 Game start and objective
01:40 The special graphics mode memories
02:30 Single buffered screen with a repeating text pattern
03:35 Score panel screen split gives us a hint
04:20 Five character sets in one video bank
07:05 Showing when the video chip displays each character set
10:45 Character sets updated while scrolling, with a wider screen "cache"
13:15 Sprite animation frame caching
19:40 Flexible object entity system, using inventory cheat codes to demonstrate this
23:05 Found some commented disassembly, to aid in finding cheats
32:20 Trying to debug the inventory code
36:20 Trying out lots of inventory objects, to find the "Destinator"
38:13 A crew member, robot, and a duplicate player character
41:20 Sprites drop-out, too many objects
44:56 Imps and wasps...
50:13 Big cannon
56:40 Using imps to break the collision detection
1:03:10 Found the Destinator, let's complete the game!



Trying to find the game start...

$61e end of protection check?
No, 6d4 receives data from the drive...
$707?
Checked for $ff in $6aa
Yes $560e

bank ram
c:\work\c64\bin\LZMPi.exe -c64mbu "c:\temp\exile 560e.prg" c:\temp\t.prg $560e

To clear the loading bitmap...
f 5800 7fff 00
s "c:\temp\exile 560e mem clear 1.prg" 0 200 ffff
c:\work\c64\bin\LZMPi.exe -c64mbu "c:\temp\exile 560e mem clear 1.prg" c:\temp\t.prg $560e


At $560e, screen rop right shows text with:
	FX138 0
	FX4 2
	(G$)
etc
This looks like BBC BASIC code?!
	https://central.kaserver5.org/Kasoft/Typeset/BBC/Ch42.html


$b3dd looks like char screen setup for scrolling

$f775 clears $6380 ++ range in the charsets?


To trap sprite cache updates
w store 4400 4fff

$f51e clears a sprite indirected with $77
	$4fc0 is the first sprite to be updated?
$f52c seems to update the just cleared sprite data using some table lookups
	Table method might be decompression
** Not the only routine that updates a sprite in the cache

$f5ce also looks like a sprite cache update?

$f40a common sprite cache update address calculation?
X = Sprite cache slot index?
$3c = Frame?

This works to show all sprite frames...
.C:4800   A2 20      LDX #$20
.C:4802   E6 3C      INC $3C
.C:4804   20 0A F4   JSR $F40A
.C:4807   AD 12 D0   LDA $D012
.C:480a   D0 FB      BNE $4807
.C:480c   4C 00 48   JMP $4800

$35 extra selection on -ve?
	Half height
$38 = flips!
	40 = Flip Y
	80 = Flip X
	


00:10 Finding the game main entry point, after loading
03:55 Compressing to a single file
07:50 Why some BBC BASIC code hidden in memory?
08:54 Temporary game initialisation code found
12:03 After temporary init, main game code
12:21 Sprite cache and decompression found
13:30 Starting to understand the sprite decompression
16:10 Teleport effect found
18:22 Hunting for the sprite entry point
20:26 Decompression entry point and data format
26:16 Finding the sprite frame index
27:11 Displaying all sprite frames
29:49 Memory view with working decompression
31:27 Sprite half height and flipping functionality
34:21 Testing with better code using the remote debugger
